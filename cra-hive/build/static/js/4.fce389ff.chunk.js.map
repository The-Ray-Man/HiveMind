{"version":3,"sources":["client/controllers/remoteDummyController.ts","client/components/GameChat.tsx","client/game/SocketGame.tsx","client/utils/useForceUpdate.ts","client/game/OnlineGame.tsx","client/game/LocalSelfGame.tsx","client/controllers/randomController.ts","client/game/LocalRandomGame.tsx","client/game/GameManager.tsx","client/utils/useQuery.ts"],"names":["remoteDummy","submitAction","state","highlighted","handleBoardClick","console","log","handleDropClick","GameChat","socket","useState","messages","setMessages","text","setText","useEffect","messageListener","message","prevMsgs","on","off","Container","fluid","Segment","Group","size","style","height","overflow","map","sender","time","inverted","floated","id","color","borderRadius","Divider","hidden","clearing","onSubmit","event","emit","preventDefault","Input","focus","type","value","onChange","target","placeholder","action","icon","SocketGame","gid","p1","p2","forceUpdate","setValue","useForceUpdate","useHiveGame","apply","actionListener","Wrapped","player","turnNumber","GenericGame","controller","OnlineGame","team","setSocket","newSocket","socketIOClient","close","useInteractiveController","InteractiveRandom","LocalGame","randomController","actions","Math","floor","random","length","LocalRandomGame","GameManager","useParams","query","URLSearchParams","useLocation","search","get","mode"],"mappings":"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","file":"static/js/4.fce389ff.chunk.js","sourcesContent":["export default function remoteDummy (submitAction, state) {\n        return ({\n            highlighted: [],\n            handleBoardClick: () => console.log(\"Remote player's turn\"),\n            handleDropClick: () => console.log(\"Remote player's turn\")\n        });\n}","import { useState, useEffect } from 'react';\nimport {  Container, Segment, Divider, Input} from 'semantic-ui-react'\n\nexport default function GameChat({ socket }) {\n    const [messages, setMessages] = useState([]);\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        const messageListener = (message) => {\n            setMessages((prevMsgs) => {\n                return [...prevMsgs, message]\n            });\n        }\n        socket.on('chatMessage', messageListener)\n        return () => {\n            socket.off('chatMessage', messageListener)\n        }\n    }, [socket]);\n\n    const handleSubmit = (event) => {\n        if (text) {\n            socket.emit('chatMessage', text)\n            setText(\"\");\n        }\n        event.preventDefault();\n    }\n    return (\n        <div>\n            <Container fluid>\n            <Segment.Group size='small' style={{\n                height: '500px',\n                overflow: 'auto'\n            }}>\n                { messages.map( ({text, sender, time}) => {\n                    return (\n                        <>\n                        <Segment inverted key={time} \n                            floated={sender === socket.id ? 'left' : 'right'}\n                            color={sender === socket.id ? 'yellow' : 'green'}\n                            style={{\n                                borderRadius: sender === socket.id ? '25px 25px 25px 0px' : '25px 25px 0px 25px'\n                            }}\n                            >\n                            {text}\n                        </Segment>\n                        <Divider hidden clearing/>\n                        </>\n                    )\n                })}\n            </Segment.Group>\n\n            <form onSubmit={handleSubmit}>\n                <Input fluid focus type=\"text\" value={text}\n                    onChange={(event)=>setText(event.target.value)}\n                    placeholder='Type something'\n                    action={{\n                        icon: 'send',\n                        color: 'primary'\n                     }} />\n            </form>\n            </Container>\n        </div>\n    )\n}\n","import GenericGame from \"./GenericGame\";\nimport useForceUpdate from \"../utils/useForceUpdate\";\nimport useHiveGame from \"./useHiveGame\";\nimport { useEffect } from \"react\";\n\nexport default function SocketGame( {socket, gid, p1, p2} ) {\n    const forceUpdate = useForceUpdate();\n    const {apply, state} = useHiveGame();\n    const submitAction = (action) => socket.emit(\"intendAction\", {action: action})\n    useEffect( () => {\n        socket.emit('joinGame', gid)\n        const actionListener = (action) => {\n            apply(action);\n            forceUpdate();\n        }\n        socket.on('updateAction', actionListener)\n        return () => {\n            socket.off('updateAction', actionListener)\n        }\n    }, [socket])\n    return <Wrapped state={state} p1={p1} p2={p2} submitAction={submitAction} />\n}    \n\nfunction Wrapped({state, p1, p2, submitAction}) {\n    const player = ((state.turnNumber % 2 === 0) ? p1 : p2)(submitAction, state)\n    return (\n        <GenericGame controller={player} state={state} />\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useForceUpdate(){\n    const [, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n","import { useInteractiveController } from '../controllers/interactiveController';\nimport remoteDummy from '../controllers/remoteDummyController';\nimport GameChat from '../components/GameChat'\n\nimport { useState, useEffect } from 'react';\nimport socketIOClient from \"socket.io-client\";\n\nimport SocketGame from './SocketGame';\n\n\nexport default function OnlineGame({ gid, team }) {\n    const [socket, setSocket] = useState(null);\n    useEffect( () => {\n        const newSocket = socketIOClient()\n        setSocket(newSocket);\n        // newSocket.onAny((...args) => {\n            // console.log(args)\n        // })\n        return () => {\n            newSocket.close()\n        }\n    }, [setSocket])\n\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = remoteDummy;\n    } else {\n        p1 = remoteDummy;\n        p2 = useInteractiveController;\n    }\n\n    return (\n        <div>\n            {socket ?\n             <div>\n                <SocketGame socket={socket} gid={gid} p1={p1} p2={p2} />\n                <GameChat socket={socket} />\n             </div>\n            : 'Not Connected' }\n        </div>\n    )\n}\n","import { useInteractiveController } from '../controllers/interactiveController';\nimport LocalGame from './LocalGame';\n\nexport default function InteractiveRandom() {\n    const p1 = useInteractiveController;\n    const p2 = useInteractiveController;\n    return <LocalGame p1={p1} p2={p2} />\n}\n","export default function randomController(submitAction, state) {\n    const action = state.actions[Math.floor(Math.random() * state.actions.length)];\n    submitAction(action);\n}","import { useInteractiveController } from '../controllers/interactiveController';\nimport randomController from '../controllers/randomController';\nimport LocalGame from './LocalGame';\n\nexport default function LocalRandomGame({ team }) {\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = randomController;\n    } else {\n        p1 = randomController;\n        p2 = useInteractiveController;\n    }\n    return <LocalGame p1={p1} p2={p2} />\n}","import { useParams } from 'react-router-dom'\nimport useQuery from '../utils/useQuery';\nimport OnlineGame from './OnlineGame';\nimport LocalSelfGame from './LocalSelfGame'\nimport LocalRandomGame from './LocalRandomGame'\n\n\nexport default function GameManager() {\n    const { gid } = useParams();\n    const query = useQuery();\n    const team = query.get('team') || 'white';\n    const mode = query.get('mode') || 'local';\n\n    if (mode === 'online') {\n        return <OnlineGame gid={gid} team={team} />\n    } else if (mode === 'local') {\n        return  <LocalSelfGame />\n    } else if (mode === 'ai' ) {\n        return <LocalRandomGame team={team} />\n    } else {\n        return (\n        <div>\n            Invalid Game\n        </div>)\n    }\n\n}\n","import { useLocation } from 'react-router-dom'\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}"],"sourceRoot":""}